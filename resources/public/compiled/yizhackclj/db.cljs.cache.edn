;; Analyzed by ClojureScript 1.8.40
{:use-macros nil, :excludes #{}, :name yizhackclj.db, :imports nil, :requires {r reagent.core, reagent.core reagent.core, fixtures yizhackclj.fixtures, yizhackclj.fixtures yizhackclj.fixtures}, :uses nil, :defs {layer-update {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 48, :column 7, :end-line 48, :end-column 19, :arglists (quote ([layer-updatable updates]))}, :name yizhackclj.db/layer-update, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 19, :method-params ([layer-updatable updates]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([layer-updatable updates]))}, clone-layer {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 108, :column 7, :end-line 108, :end-column 18, :arglists (quote ([layer-id]))}, :name yizhackclj.db/clone-layer, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 18, :method-params ([layer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([layer-id]))}, button-update {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 90, :column 7, :end-line 90, :end-column 20, :arglists (quote ([button-updatable updates]))}, :name yizhackclj.db/button-update, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 20, :method-params ([button-updatable updates]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 2, :fn-var true, :arglists (quote ([button-updatable updates]))}, populate-fixture-keyboard {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 260, :column 7, :end-line 260, :end-column 32, :arglists (quote ([]))}, :name yizhackclj.db/populate-fixture-keyboard, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 32, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, buttons {:name yizhackclj.db/buttons, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 28, :column 1, :end-line 28, :end-column 13, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 28, :column 6, :end-line 28, :end-column 13}}, remove-layer {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 137, :column 7, :end-line 137, :end-column 19, :arglists (quote ([layer-id]))}, :name yizhackclj.db/remove-layer, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 19, :method-params ([layer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 137, :end-line 137, :max-fixed-arity 1, :fn-var true, :arglists (quote ([layer-id]))}, button {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 75, :column 7, :end-line 75, :end-column 13, :arglists (quote ([layer-id row column]))}, :name yizhackclj.db/button, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 13, :method-params ([layer-id row column]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 3, :fn-var true, :arglists (quote ([layer-id row column]))}, deserialize-keyboard {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 241, :column 16, :end-line 241, :end-column 36, :export true, :arglists (quote ([keyboard-json-string]))}, :name yizhackclj.db/deserialize-keyboard, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 36, :method-params ([keyboard-json-string]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 241, :end-line 241, :max-fixed-arity 1, :fn-var true, :arglists (quote ([keyboard-json-string]))}, to-json {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 10, :column 7, :end-line 10, :end-column 14, :arglists (quote ([object]))}, :name yizhackclj.db/to-json, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 14, :method-params ([object]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([object]))}, layer-ids {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 40, :column 7, :end-line 40, :end-column 16, :arglists (quote ([]))}, :name yizhackclj.db/layer-ids, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, clear-layer {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 193, :column 7, :end-line 193, :end-column 18, :arglists (quote ([layer-id]))}, :name yizhackclj.db/clear-layer, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 18, :method-params ([layer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 193, :end-line 193, :max-fixed-arity 1, :fn-var true, :arglists (quote ([layer-id]))}, deserialize-layer {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 213, :column 16, :end-line 213, :end-column 33, :export true, :arglists (quote ([layer-json-string]))}, :name yizhackclj.db/deserialize-layer, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 33, :method-params ([layer-json-string]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 213, :end-line 213, :max-fixed-arity 1, :fn-var true, :arglists (quote ([layer-json-string]))}, layer-head {:name yizhackclj.db/layer-head, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 20, :column 1, :end-line 20, :end-column 16, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 20, :column 6, :end-line 20, :end-column 16}}, layer-by-id {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 44, :column 7, :end-line 44, :end-column 18, :arglists (quote ([layer-id]))}, :name yizhackclj.db/layer-by-id, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 18, :method-params ([layer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 44, :end-line 44, :max-fixed-arity 1, :fn-var true, :arglists (quote ([layer-id]))}, serialize-keyboard {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 255, :column 16, :end-line 255, :end-column 34, :export true, :arglists (quote ([]))}, :name yizhackclj.db/serialize-keyboard, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 34, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, layer-head-dec {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 23, :column 7, :end-line 23, :end-column 21, :arglists (quote ([]))}, :name yizhackclj.db/layer-head-dec, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, parse-json {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 14, :column 7, :end-line 14, :end-column 17, :arglists (quote ([json-string]))}, :name yizhackclj.db/parse-json, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 17, :method-params ([json-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([json-string]))}, parse-layer {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 265, :column 7, :end-line 265, :end-column 18, :arglists (quote ([value]))}, :name yizhackclj.db/parse-layer, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 18, :method-params ([value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 265, :end-line 265, :max-fixed-arity 1, :fn-var true, :arglists (quote ([value]))}, remove-keyboard {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 31, :column 7, :end-line 31, :end-column 22, :arglists (quote ([]))}, :name yizhackclj.db/remove-keyboard, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 31, :end-line 31, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, layer-head-inc {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 22, :column 7, :end-line 22, :end-column 21, :arglists (quote ([]))}, :name yizhackclj.db/layer-head-inc, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 21, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 22, :end-line 22, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, buttons-by-layer-id {:protocol-inline nil, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 65, :column 7, :end-line 65, :end-column 26, :arglists (quote ([layer-id]))}, :name yizhackclj.db/buttons-by-layer-id, :variadic false, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :end-column 26, :method-params ([layer-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([layer-id]))}, layers {:name yizhackclj.db/layers, :file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 26, :column 1, :end-line 26, :end-column 12, :meta {:file "/Users/sandric/projects/clojure/yizhack/src/yizhackclj/db.cljs", :line 26, :column 6, :end-line 26, :end-column 12}}}, :require-macros {r reagent.core, reagent.core reagent.core}, :cljs.analyzer/constants {:seen #{:color :layout :name :value :layer-id :column :id :layers :keywordize-keys :row}, :order [:keywordize-keys :layer-id :row :column :id :name :color :value :layout :layers]}, :doc nil}